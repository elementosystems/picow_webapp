---
name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: self-hosted
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Build production assets
      - name: Build production assets
        run: npx parcel build index.html

      # Step 5: Get version from version.json
      - name: Verify version consistency
        run: |
          # Extract version from version.json and store it in VERSION
          VERSION=$(jq -r '.version' version.json)
          echo "version.json version: $VERSION"
          echo "VERSION=$(jq -r '.version' version.json)" >> $GITHUB_ENV

          # Extract version from index.html footer using sed (removing the preceding "v")
          html_version=$(tr '\n' ' ' < index.html | sed -E -n 's/.*<div style="flex: 1; text-align: right; font-weight: bold;">[[:space:]]*v([0-9.]+).*<\/div>.*/\1/p')
          echo "index.html version: $html_version"

          # Compare versions (fail if mismatched)
          if [ "$VERSION" != "$html_version" ]; then
            echo "Version mismatch: version.json ($VERSION) and index.html ($html_version)"
            exit 1
          fi


      # Step 6: Log in to Docker registry
      - name: Log in to Docker registry
        uses: docker/login-action@v3
        with:
          registry: harbor.elementosystems.com
          username: ${{ secrets.HARBOR_USER }}
          password: ${{ secrets.HARBOR_SECRET }}

      # Step 7: Set up QEMU for emulation
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Step 8: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      # Step 9a: Build, tag, and push amd64 image using harbor registry commands
      - name: Build and push linux/amd64 image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t harbor.elementosystems.com/pico_webapp/picow_webapp:v${{ env.VERSION }}-amd64 \
            --load \
            .
          docker push harbor.elementosystems.com/pico_webapp/picow_webapp:v${{ env.VERSION }}-amd64

      - name: Build and push linux/arm/v7 image
        run: |
          docker buildx build \
            --platform linux/arm/v7 \
            -t harbor.elementosystems.com/pico_webapp/picow_webapp:v${{ env.VERSION }}-armv7 \
            --load \
            .
          docker push harbor.elementosystems.com/pico_webapp/picow_webapp:v${{ env.VERSION }}-armv7

      - name: Build and push linux/arm64 image
        run: |
          docker buildx build \
            --platform linux/arm64 \
            -t harbor.elementosystems.com/pico_webapp/picow_webapp:v${{ env.VERSION }}-arm64 \
            --load \
            .
          docker push harbor.elementosystems.com/pico_webapp/picow_webapp:v${{ env.VERSION }}-arm64

      - name: Create and push multi-arch manifest
        run: |
          docker manifest create harbor.elementosystems.com/pico_webapp/picow_webapp:v${{ env.VERSION }} \
            harbor.elementosystems.com/pico_webapp/picow_webapp:v${{ env.VERSION }}-amd64 \
            harbor.elementosystems.com/pico_webapp/picow_webapp:v${{ env.VERSION }}-armv7 \
            harbor.elementosystems.com/pico_webapp/picow_webapp:v${{ env.VERSION }}-arm64

          docker manifest push harbor.elementosystems.com/pico_webapp/picow_webapp:v${{ env.VERSION }}
